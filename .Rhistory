library("rvest")
library("RCulr")
library("selectr")
library("XML")
library(data.table)
paginatwitchtracker <- 'https://twitchtracker.com/'
# Leyendo el html del archivo
webpagetwitchtracker <- read_html(paginatwitchtracker)
# Extraccion del texto contenido en la clase thumb-under
contenidoWebtwitchtracker <- html_nodes(webpagetwitchtracker,'.thumb-under > p > a')
print (contenidoWebtwitchtracker)
# Viendo el contenido de la posición 1 de la variable contenidoWebtwitchtracker
print(contenidoWebtwitchtracker[1])
# Extrayendo los links de los videos
linksVIDEOS <- html_attr(contenidoWebtwitchtracker,"href")
# Arreglando los links de todos los videos
todosLosLinkstwitchtracker <- ""
for(i in 1:27){
todosLosLinkstwitchtracker <- print(paste("twitchtracker",linksVIDEOS,sep = ""))
}
View(contenidoWebtwitchtracker)
View(webpagetwitchtracker)
rm(list = ls())
install.packages("rvest")
library(rvest)
library(robotstxt)
library(selectr)
library(xml2)
library(dplyr)
library(stringr)
library(forcats)
library(magrittr)
library(tidyr)
library(ggplot2)
library(lubridate)
library(tibble)
library(purrr)
# Preguntar a robots.txt si esta permitido bajar esto devuelve TRUE/FALSE
paths_allowed(paths = c(url))
# Preguntar a robots.txt si esta permitido bajar esto devuelve TRUE/FALSE
paths_allowed(paths = c(url))
# Instalar la librería
install.packages("rvest")
# Preguntar a robots.txt si esta permitido bajar esto devuelve TRUE/FALSE
paths_allowed(paths = c(url))
library(rvest)
library(robotstxt)
library(selectr)
library(xml2)
library(dplyr)
library(stringr)
library(forcats)
library(magrittr)
library(tidyr)
library(ggplot2)
library(lubridate)
library(tibble)
library(purrr)
# Preguntar a robots.txt si esta permitido bajar esto devuelve TRUE/FALSE
paths_allowed(paths = c(url))
# Obtener el código html de la página web
pagina_web <- read_html(url)
# Asignar la clase
css_producto <- "a.a-link-normal.s-access-detail-page.s-color-twister-title-link.a-text-normal"
# Obtener el código html de la página web
pagina_web <- read_html(url)
# Asignar la url
url <- "https://www.twitchmetrics.net/channels/growth"
# Preguntar a robots.txt si esta permitido bajar esto devuelve TRUE/FALSE
paths_allowed(paths = c(url))
# Obtener el código html de la página web
pagina_web <- read_html(url)
# Preguntar a robots.txt si esta permitido bajar esto devuelve TRUE/FALSE
paths_allowed(paths = c(url))
# Asignar la clase
css_producto <- "a.a-link-normal.s-access-detail-page.s-color-twister-title-link.a-text-normal"
# Obtener el código html que contiene el nombre del producto
producto_html <- html_nodes(pagina_web,css_producto)
producto_texto <- html_text(producto_html)
length(producto_texto)
tail(producto_texto)
View(producto_html)
# Limpiar la consola
rm(list = ls())
# Asignar la url
url <- "https://www.twitchmetrics.net/channels/growth"
# Obtener el código html de la página web
pagina_web <- read_html(url)
# Obtener el código html de la página web
pagina_web <- read_html(url)
# Asignar la clase
css_producto <- "a.a-link-normal.s-access-detail-page.s-color-twister-title-link.a-text-normal"
# Obtener el código html de la página web
pagina_web <- read_html(url)
# Obtener el código html de la página web
pagina_web <- read_html(url)
# Obtener el código html de la página web
pagina_web <- read_html(url)
pagina_web
url
# Asignar la url
url <- "https://www.twitchmetrics.net/channels/growth"
pagina_web
# Obtener el código html de la página web
pagina_web <- read_html(url)
css_producto
# Asignar la clase
css_producto <- "a.a-link-normal.s-access-detail-page.s-color-twister-title-link.a-text-normal"
# Asignar la url
url <- "https://www.twitchmetrics.net/channels/growth"
# Obtener el código html de la página web
pagina_web <- read_html(url)
pagina_web
# Asignar la clase
css_producto <- "d-flex mb-3 justify-content-md-between justify-content-center flex-wrap align-items-end"
css_producto
producto_html
# Obtener el código html que contiene el nombre del producto
producto_html <- html_nodes(pagina_web,css_producto)
producto_html
View(pagina_web)
View(producto_html)
View(producto_html)
View(pagina_web)
# Asignar la clase
css_producto <- "list-group"
# Obtener el código html que contiene el nombre del producto
producto_html <- html_nodes(pagina_web,css_producto)
producto_html
View(producto_html)
View(pagina_web)
# Obtener el código html de la página web
pagina_web <- read_html(url)
# Obtener el código html de la página web
pagina_web <- read_html(url)
# Obtener el código html de la página web
pagina_web <- read_html(url)
# Obtener el código html de la página web
pagina_web <- read_html(url)
# Asignar la clase
css_producto <- "list-group"
# Obtener el código html que contiene el nombre del producto
producto_html <- html_nodes(pagina_web,css_producto)
producto_texto <- html_text(producto_html)
# Exhibir los datos
producto_texto
length(producto_texto)
# Limpiado de vriables
rm(list = ls())
# cargar las librerias
library(xml2)
library(rvest)
source('libreriasYapo.R')
library(xml2)
library(rvest)
source('libreriasYapo.R')
# cargar las librerias
library(xml2)
library(rvest)
source('libreriasYapo.R')
fullDatos <- data.frame()
for(numeroPagina in 1:3){
readHtml <- read_html(paste("https://www.twitchmetrics.net/",numeroPagina,sep = ""))
print(paste("Descargando pagina nro:",numeroPagina))
nodeTabla <- html_nodes(readHtml, "d-flex mb-3 justify-content-md-between justify-content-center flex-wrap align-items-end")
nodeTabla <- html_nodes(nodeTabla, "d-flex mb-3 justify-content-md-between justify-content-center flex-wrap align-items-end")
linksProductos <- html_attr(nodeTabla,"href")
for (urlYapo in linksProductos) {
htmlSeg <- read_html(urlYapo)
print(paste("Descargando URL ==> ",urlYapo))
textoTipoAviso <- obtenerCategoria(htmlSeg)
precio <- sacandoPrecio(htmlSeg)
comuna <- obtenerComuna(htmlSeg)
tipoNegocio <- obtenerTipoNegocio(htmlSeg)
anioUsuarioyapo <- obtenerAnioUsuarioYapo(htmlSeg)
publicacionesactivasusuarioyapo <- obtenerPublicacionesActivasUsuarioYapo(htmlSeg)
publicacionestotalesusuarioyapo <- obtenerPublicacionesTotalesUsuarioYapo(htmlSeg)
fullDatos <- rbind(fullDatos,data.frame(comuna = comuna, categoria = textoTipoAviso, precio = precio,
tiponegocio = tipoNegocio, aniousuarioyapo = anioUsuarioyapo,
urlyapo = urlYapo ))
}
}
View(fullDatos)
View(fullDatos)
View(fullDatos)
twitchmetrics <- data.frame()
for(numeroPagina in 1:3){
readHtml <- read_html(paste("https://www.twitchmetrics.net/",numeroPagina,sep = ""))
print(paste("Descargando pagina nro:",numeroPagina))
nodeTabla <- html_nodes(readHtml, "d-flex mb-3 justify-content-md-between justify-content-center flex-wrap align-items-end")
nodeTabla <- html_nodes(nodeTabla, "d-flex mb-3 justify-content-md-between justify-content-center flex-wrap align-items-end")
linksProductos <- html_attr(nodeTabla,"href")
for (urlYapo in linksProductos) {
htmlSeg <- read_html(urlYapo)
print(paste("Descargando URL ==> ",urlYapo))
textoTipoAviso <- obtenerCategoria(htmlSeg)
precio <- sacandoPrecio(htmlSeg)
comuna <- obtenerComuna(htmlSeg)
tipoNegocio <- obtenerTipoNegocio(htmlSeg)
anioUsuarioyapo <- obtenerAnioUsuarioYapo(htmlSeg)
publicacionesactivasusuarioyapo <- obtenerPublicacionesActivasUsuarioYapo(htmlSeg)
publicacionestotalesusuarioyapo <- obtenerPublicacionesTotalesUsuarioYapo(htmlSeg)
fullDatos <- rbind(fullDatos,data.frame(comuna = comuna, categoria = textoTipoAviso, precio = precio,
tiponegocio = tipoNegocio, aniousuarioyapo = anioUsuarioyapo,
urlyapo = urlYapo ))
}
}
View(fullDatos)
View(twitchmetrics)
twitchmetrics <- data.frame()
for(numeroPagina in 1:3){
readHtml <- read_html(paste("https://www.twitchmetrics.net/",numeroPagina,sep = ""))
print(paste("Descargando pagina nro:",numeroPagina))
nodeTabla <- html_nodes(readHtml, "d-flex mb-3 justify-content-md-between justify-content-center flex-wrap align-items-end")
nodeTabla <- html_nodes(nodeTabla, "d-flex mb-3 justify-content-md-between justify-content-center flex-wrap align-items-end")
linksProductos <- html_attr(nodeTabla,"href")
for (urltwitchmetrics in linksProductos) {
htmlSeg <- read_html(urltwitchmetrics)
print(paste("Descargando URL ==> ",urltwitchmetrics))
textoTipoAviso <- obtenerCategoria(htmlSeg)
The_Fastest_Growing_Twitch_Streamers <- sacandoThe_Fastest_Growing_Twitch_Streamers(htmlSeg)
twitchmetrics <- rbind(fullDatos,data.frame(The_Fastest_Growing_Twitch_Streamers = The_Fastest_Growing_Twitch_Streamers,
urltwitchmetrics = urltwitchmetrics ))
}
}
View(twitchmetrics)
# cargar las librerias
library(xml2)
library(rvest)
source('libreriasYapo.R')
twitchmetrics <- data.frame()
for(numeroPagina in 1:3){
readHtml <- read_html(paste("https://www.twitchmetrics.net/",numeroPagina,sep = ""))
print(paste("Descargando pagina nro:",numeroPagina))
nodeTabla <- html_nodes(readHtml, "d-flex mb-3 justify-content-md-between justify-content-center flex-wrap align-items-end")
nodeTabla <- html_nodes(nodeTabla, "d-flex mb-3 justify-content-md-between justify-content-center flex-wrap align-items-end")
linksProductos <- html_attr(nodeTabla,"href")
for (urltwitchmetrics in linksProductos) {
htmlSeg <- read_html(urltwitchmetrics)
print(paste("Descargando URL ==> ",urltwitchmetrics))
textoTipoAviso <- obtenerCategoria(htmlSeg)
The_Fastest_Growing_Twitch_Streamers <- sacandoThe_Fastest_Growing_Twitch_Streamers(htmlSeg)
twitchmetrics <- rbind(fullDatos,data.frame(The_Fastest_Growing_Twitch_Streamers = The_Fastest_Growing_Twitch_Streamers,
urltwitchmetrics = urltwitchmetrics ))
}
}
View(twitchmetrics)
# Limpiar la consola
rm(list = ls())
# Instalar la librería
install.packages("rvest")
# Invocar la librería
library(rvest)
library(robotstxt)
library(selectr)
library(xml2)
library(dplyr)
library(stringr)
library(forcats)
library(magrittr)
library(tidyr)
library(ggplot2)
library(lubridate)
library(tibble)
library(purrr)
# Asignar la url
url <- "https://www.twitchmetrics.net/"
paths_allowed(paths = c(url))
paths_allowed(paths = c(url))
# Obtener el código html de la página web
pagina_web <- read_html(url)
pagina_web
# Asignar la clase
css_streamer <- "list-group-item py-4 px-3"
View(pagina_web)
# Obtener el código html que contiene el nombre del streamer
streamer_html <- html_nodes(pagina_web,css_streamer)
streamer_html
# Asignar la clase
css_streamer <- "container my-5"
# Asignar la clase
css_streamer <- "row"
# Asignar la clase
css_streamer <- "col-12 col-lg-6 mb-4 mb-md-3"
# Asignar la clase
css_streamer <- "d-flex mb-3 justify-content-md-between justify-content-center flex-wrap align-items-end"
# Asignar la clase
css_streamer <- "btn btn-link"
# Asignar la clase
css_streamer <- "fas fa-arrow-right"
# Asignar la clase
css_streamer <- "list-group"
